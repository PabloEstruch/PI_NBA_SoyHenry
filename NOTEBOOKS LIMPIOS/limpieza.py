{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"rN0xkIelCksv"},"outputs":[],"source":["#importar librerias\n","import pandas as pd\n","from sqlalchemy import create_engine\n","import numpy as np\n","\n","\n","\n","\n","#lecura de archivos a usar (conectar a la API, Seleccionar de un Bucket)\n","\n","df_game\n","df_team #eliminar\n","df_team_details\n","df_other_stats\n","df_line_score\n","df_common_player\n","df_draft_history\n","df_game_info\n","df_play_by_play\n","\n","#limpieza\n","\n","\n","dfs = {\n","    'df_game': df_game,\n","    'df_team': df_team,  #eliminar\n","    'df_team_details': df_team_details,\n","    'df_other_stats': df_other_stats,\n","    'df_line': df_line,\n","    'df_common_player': df_common_player,\n","    'df_draft_history': df_draft_history,\n","    'df_game_info': df_game_info,\n","    'df_play_by_play': df_play_by_play\n","}\n","\n","#eliminar columnas de dataframes\n","columns_to_drop = {\n","    'df_game': ['team_abbreviation_home',\t'team_name_home', 'video_available_away', 'game_date', 'matchup_home',\n","                'matchup_away', 'team_abbreviation_away', 'team_name_away', 'video_available_home'],\n","    'df_team_details': ['id', 'dleagueaffiliation'],\n","    'df_other_stats': ['league_id', 'team_abbreviation_home', 'team_city_home', 'team_abbreviation_away', 'team_city_away',\n","                       'largest_lead_home', 'largest_lead_away', 'lead_changes', 'times_tied', 'team_turnovers_home', 'team_turnovers_away',\n","                       'team_rebounds_home', 'team_rebounds_away'],\n","    'df_line': [\"pts_ot5_home\",\"pts_ot6_home\",\"pts_ot7_home\",\"pts_ot8_home\",\"pts_ot9_home\",\"pts_ot10_home\",\"pts_ot5_away\",\"pts_ot6_away\",\n","                      \"pts_ot7_away\",\"pts_ot8_away\",\"pts_ot9_away\",\"pts_ot10_away\",\"game_sequence\",\"team_abbreviation_home\",\"team_city_name_home\",\n","                      \"team_nickname_home\",\"team_abbreviation_away\",\"team_city_name_away\",\"team_nickname_away\",\"game_date_est\",\n","                      \"team_wins_losses_home\",\"team_wins_losses_away\"],\n","    'df_common_player': ['display_first_last', 'display_last_comma_first', 'display_fi_last', 'player_slug', 'last_affiliation', 'team_name',\n","                         'team_code', 'dleague_flag', 'nba_flag', 'games_played_flag', 'greatest_75_flag', 'player_code',\n","                         'games_played_current_season_flag','school', 'team_abbreviation', 'team_city'],\n","    'df_draft_history': ['player_profile_flag', 'draft_type', 'player_name', 'season',\t'round_number',\t'round_pick', 'overall_pick',\n","                         'team_city', 'team_name', 'team_abbreviation', 'organization', 'organization_type'],\n","    'df_game_info': ['game_time'],\n","    'df_play_by_play': ['wctimestring', 'eventnum', 'neutraldescription', 'person1type', 'person2type', 'person3type',\n","                        'player1_team_city', 'player1_team_nickname', 'player2_team_city', 'player2_team_nickname', 'player3_team_city',\n","                        'player3_team_nickname', 'video_available_flag', 'player3_id', 'player3_name', 'player3_team_id',\n","                        'player3_team_abbreviation', 'eventnum', 'eventmsgactiontype', 'pctimestring', 'scoremargin', 'player1_name',\n","                        'player1_team_id', 'player2_name','player2_team_id']\n","}\n","\n","# cambio de datos game y game info ******\n","df_line = df_line.rename(columns={'game_date_est': 'game_date'})\n","dfs_cambio = ['df_game', 'df_game_info', 'df_line']\n","\n","for df in dfs_cambio:\n","    df['game_date'] = pd.to_datetime(df['game_date'])\n","\n","\n","#2018 en adelante ******\n","df_game = game[game['game_date'] >  '2018-10-01']\n","df_game_info = game_info[game_info['game_date'] >  '2018-10-01']\n","df_line = df_line[(df_line[\"game_date_est\"] > \"2018-10-16\")]\n","df_common_player=df_common_player[(df_common_player['from_year'] >= 2001)]\n","df_draft_history = df_draft_history[(df_draft_history[\"season\"] >= 2001)]\n","\n","#conversion de datos nulos\n","\n","for name, df in dfs.items():\n","    print(f\"DataFrame: {name}\")\n","    print(df.isnull().sum())  # Cantidad de nulos por columna\n","    print(f\"Total de nulos: {df.isnull().sum().sum()}\\n\")  # Total de nulos en el DataFrame\n","\n","\n","columnas_a_llenar = {\n","    df_game: ['ft_pct_home'],\n","    df_other_stats: ['team_turnovers_home', 'total_turnovers_home', 'team_rebounds_home', 'pts_off_to_home', 'team_turnovers_away', 'total_turnovers_away',\n","                     'team_rebounds_away', 'pts_off_to_away']\n","\n","}\n","\n","# Iterar sobre cada DataFrame y sus columnas\n","for df, columnas in columnas_a_llenar.items():\n","    df[columnas] = df[columnas].fillna(0)\n","\n","\n","#completar de forma especifica los nulos team_details\n","nuevos_registros = [\n","    {\n","        'team_id': '1610612738',\n","        'abbreviation': 'BOS',\n","        'nickname': 'Celtics',\n","        'yearfounded': '1946',\n","        'city': 'Boston',\n","        'arena': 'TD Garden',\n","        'arenacapacity': '18624',\n","        'owner': 'Wyc Grousbeck',\n","        'generalmanager': 'Brad Stevens',\n","        'headcoach': 'Joe Mazzulla',\n","        'dleagueaffiliation': 'Maine Celtics',\n","        'facebook': 'https://web.facebook.com/bostonceltics/',\n","        'instagram': 'https://www.instagram.com/celtics/',\n","        'twitter': 'https://x.com/celtics'\n","    },\n","    {\n","        'team_id': '1610612739',\n","        'abbreviation': 'CLE',\n","        'nickname': 'Cavaliers',\n","        'yearfounded': '1970',\n","        'city': 'cleveland',\n","        'arena': 'Rocket Arena',\n","        'arenacapacity': '19432',\n","        'owner': 'Dan Gilbert',\n","        'generalmanager': 'Mike Gansey',\n","        'headcoach': 'Kenny Atkinson',\n","        'dleagueaffiliation': 'The Cleveland Charge',\n","        'facebook': 'https://web.facebook.com/Cavs/',\n","        'instagram': 'https://www.instagram.com/cavs/',\n","        'twitter': 'https://x.com/cavs'\n","    },\n","    {\n","        'team_id': '1610612740',\n","        'abbreviation': 'NOP',\n","        'nickname': 'Pelicans',\n","        'yearfounded': '2002',\n","        'city': 'New Orleans',\n","        'arena': 'New Orleans Arena',\n","        'arenacapacity': '17791',\n","        'owner': 'Gayle Benson',\n","        'generalmanager': 'Bryson Graham',\n","        'headcoach': 'Willie Green',\n","        'dleagueaffiliation': 'Birmingham Squadron',\n","        'facebook': 'https://web.facebook.com/PelicansNBA/',\n","        'instagram': 'https://www.instagram.com/pelicansnba/',\n","        'twitter': 'https://x.com/PelicansNBA'\n","    },\n","    {\n","        'team_id': '1610612752',\n","        'abbreviation': 'NYK',\n","        'nickname': 'Knicks',\n","        'yearfounded': '1946',\n","        'city': 'New York',\n","        'arena': 'Madison Square Garden',\n","        'arenacapacity': '19500',\n","        'owner': 'James L. Dolan',\n","        'generalmanager': 'Gersson Rosas',\n","        'headcoach': 'Tom Thibodeau',\n","        'dleagueaffiliation': 'Westchester Knicks',\n","        'facebook': 'https://web.facebook.com/NYKnicks',\n","        'instagram': 'https://www.instagram.com/nyknicks',\n","        'twitter': 'https://x.com/nyknicks'\n","    },\n","    {\n","        'team_id': '1610612753',\n","        'abbreviation': 'ORL',\n","        'nickname': 'Magic',\n","        'yearfounded': '1989',\n","        'city': 'Orlando',\n","        'arena': 'Kia Center',\n","        'arenacapacity': '20000',\n","        'owner': 'RDV Sports, Inc.',\n","        'generalmanager': 'Anthony Parker',\n","        'headcoach': 'Jamahl Mosley',\n","        'dleagueaffiliation': 'Osceola Magic y Lakeland Magic',\n","        'facebook': 'https://web.facebook.com/OrlandoMagic/',\n","        'instagram': 'https://www.instagram.com/orlandomagic/',\n","        'twitter': 'https://x.com/OrlandoMagic'\n","    }\n","]\n","'team_details' = pd.concat([team_details, pd.DataFrame(nuevos_registros)], ignore_index=True)\n","\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Nuggets\", \"arenacapacity\"] = 21000\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Warriors\", \"arenacapacity\"] = 18064\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Nets\", \"arenacapacity\"] = 19000\n","df_team_details.loc[df_team_details[\"nickname\"] == \"76ers\", \"arenacapacity\"] = 21000\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Suns\", \"arenacapacity\"] = 18422\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Thunder\", \"arenacapacity\"] = 18203\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Raptors\", \"arenacapacity\"] = 19800\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Jazz\", \"arenacapacity\"] = 20000\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Pistons\", \"arenacapacity\"] = 20491\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Raptors\", \"headcoach\"] = 'Darko Rajaković'\n","\n","df_team_details= f_team_details.sort_values(by='team_id').reset_index()\n","\n","#crear una nueva columna en team_details\n","equipos_este = [\"BOS\", \"BKN\", \"NYK\", \"PHI\", \"TOR\", \"ATL\", \"CHA\", \"MIA\", \"ORL\", \"WAS\", \"CHI\", \"CLE\", \"DET\", \"IND\", \"MIL\"]\n","\n","df_team_details[\"Conferencia\"] = df_team_details[\"abbreviation\"].apply(lambda x: \"East\" if x in equipos_este else \"West\")\n","\n","df_team_details['full_name'] = df_team_details['city ' + 'nickname']\n","\n","\n","# filtrar los datos de 'All Stars' y 'pretemporada' game\n","\n","df_game = df_game[~df_game['season_type'].isin(['All-Star', 'All Star', 'Pre Season'])]\n","\n","# filtro de publico por maximo game_info\n","df_game_info = df_game_info[df_game_info['attendance'] <= 21711]\n","\n","\n","#limpios\n","\n","\n","#cargar\n","server = 'server-sql-grupo1.database.windows.net'\n","database = 'NBA'\n","username = 'Admon'\n","password = 'Password.Server1'\n","\n","connection_string = f'mssql+pyodbc://{username}:{password}@{server}/{database}?driver=ODBC+Driver+17+for+SQL+Server'\n","\n","engine = create_engine(connection_string)\n","\n","df_team_details.to_sql('team_details_filtrada', con=engine, if_exists='replace', index=False)\n","\n","\n"]},{"cell_type":"code","source":["pip install pymssql"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y04q82fBAehR","executionInfo":{"status":"ok","timestamp":1741877804690,"user_tz":180,"elapsed":2825,"user":{"displayName":"Francisco Diaz Molina","userId":"09290855720730868827"}},"outputId":"1c015337-c1de-4744-bfd4-20b1e776ae78"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pymssql in /usr/local/lib/python3.11/dist-packages (2.3.2)\n"]}]},{"cell_type":"code","source":["pip install pyodbc sqlalchemy pandas"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ao9FgHxGf0YD","executionInfo":{"status":"ok","timestamp":1741877524823,"user_tz":180,"elapsed":3936,"user":{"displayName":"Francisco Diaz Molina","userId":"09290855720730868827"}},"outputId":"100120a4-7a71-4fd1-8da4-ca418fc76941"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pyodbc\n","  Downloading pyodbc-5.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.7 kB)\n","Requirement already satisfied: sqlalchemy in /usr/local/lib/python3.11/dist-packages (2.0.38)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy) (3.1.1)\n","Requirement already satisfied: typing-extensions>=4.6.0 in /usr/local/lib/python3.11/dist-packages (from sqlalchemy) (4.12.2)\n","Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Downloading pyodbc-5.2.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (346 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m346.2/346.2 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pyodbc\n","Successfully installed pyodbc-5.2.0\n"]}]},{"cell_type":"code","source":["#importar librerias\n","import pandas as pd\n","import pymssql\n","import pyodbc\n","from sqlalchemy import create_engine\n","import numpy as np\n","#lecura de archivos a usar (conectar a la API, Seleccionar de un Bucket)\n","#df_team eliminar\n","df_game=pd.read_csv('/game.csv')\n","df_team_details=pd.read_csv('/team_details.csv')\n","df_other_stats=pd.read_csv('/other_stats.csv')\n","df_line=pd.read_csv('/line_score.csv')\n","df_common_player=pd.read_csv('/common_player_info.csv')\n","df_draft_history=pd.read_csv('/draft_history.csv')\n","df_game_info=pd.read_csv('/game_info.csv')\n","#df_play_by_play=pd.read_csv('game_info.csv')\n","\n","#limpieza\n","\n","\n","dfs = {\n","    'df_game': df_game,\n","    #'df_team': df_team,  #eliminar\n","    'df_team_details': df_team_details,\n","    'df_other_stats': df_other_stats,\n","    'df_line': df_line,\n","    'df_common_player': df_common_player,\n","    'df_draft_history': df_draft_history,\n","    'df_game_info': df_game_info,\n","    #'df_play_by_play': df_play_by_play\n","}\n","\n","#eliminar columnas de dataframes\n","columns_to_drop = {\n","    'df_game': ['team_abbreviation_home',\t'team_name_home', 'video_available_away', 'matchup_home',\n","                'matchup_away', 'team_abbreviation_away', 'team_name_away', 'video_available_home'], #, 'game_date'\n","    'df_team_details': [ 'dleagueaffiliation'], #'id'\n","    'df_other_stats': ['league_id', 'team_abbreviation_home', 'team_city_home', 'team_abbreviation_away', 'team_city_away',\n","                       'largest_lead_home', 'largest_lead_away', 'lead_changes', 'times_tied', 'team_turnovers_home', 'team_turnovers_away',\n","                       'team_rebounds_home', 'team_rebounds_away'],\n","    'df_line': [\"pts_ot5_home\",\"pts_ot6_home\",\"pts_ot7_home\",\"pts_ot8_home\",\"pts_ot9_home\",\"pts_ot10_home\",\"pts_ot5_away\",\"pts_ot6_away\",\n","                      \"pts_ot7_away\",\"pts_ot8_away\",\"pts_ot9_away\",\"pts_ot10_away\",\"game_sequence\",\"team_abbreviation_home\",\"team_city_name_home\",\n","                      \"team_nickname_home\",\"team_abbreviation_away\",\"team_city_name_away\",\"team_nickname_away\",\n","                      \"team_wins_losses_home\",\"team_wins_losses_away\"],#\"game_date_est\"\n","    'df_common_player': ['display_first_last', 'display_last_comma_first', 'display_fi_last', 'player_slug', 'last_affiliation', 'team_name',\n","                         'team_code', 'dleague_flag', 'nba_flag', 'games_played_flag', 'greatest_75_flag',\n","                         'games_played_current_season_flag','school', 'team_abbreviation', 'team_city'],#'player_code'\n","    'df_draft_history': ['player_profile_flag', 'draft_type', 'player_name',\t'round_number',\t'round_pick', 'overall_pick',\n","                         'team_city', 'team_name', 'team_abbreviation', 'organization', 'organization_type'],#, 'season'\n","    'df_game_info': ['game_time'],\n","    #'df_play_by_play': ['wctimestring', 'eventnum', 'neutraldescription', 'person1type', 'person2type', 'person3type',\n","    #                    'player1_team_city', 'player1_team_nickname', 'player2_team_city', 'player2_team_nickname', 'player3_team_city',\n","    #                    'player3_team_nickname', 'video_available_flag', 'player3_id', 'player3_name', 'player3_team_id',\n","    #                   'player3_team_abbreviation', 'eventnum', 'eventmsgactiontype', 'pctimestring', 'scoremargin', 'player1_name',\n","    #                   'player1_team_id', 'player2_name','player2_team_id']\n","}\n","\n","for df_name, columns in columns_to_drop.items():\n","    df = globals().get(df_name)\n","    if df is not None:\n","        df.drop(columns=columns, axis=1, inplace=True)\n","\n","\n","# cambio de datos game y game info ******\n","df_line = df_line.rename(columns={'game_date_est': 'game_date'})\n","\n","#Pasar date a fecha\n","\n","df_game_info['game_date'] = pd.to_datetime(df_game_info['game_date'])\n","df_game['game_date'] = pd.to_datetime(df_game['game_date'])\n","df_line['game_date'] = pd.to_datetime(df_line['game_date'])\n","\n","\n","#2018 en adelante ******\n","df_game = df_game[df_game['game_date'] >  '2018-10-01']\n","df_game_info = df_game_info[df_game_info['game_date'] >  '2018-10-01']\n","df_line = df_line[(df_line[\"game_date\"] > \"2018-10-16\")]\n","df_common_player=df_common_player[(df_common_player['from_year'] >= 2001)]\n","df_draft_history = df_draft_history[(df_draft_history[\"season\"] >= 2001)]\n","\n","#conversion de datos nulos\n","\n","#for name, df in dfs.items():\n"," #   print(f\"DataFrame: {name}\")\n","   # print(df.isnull().sum())  # Cantidad de nulos por columna\n","  #  print(f\"Total de nulos: {df.isnull().sum().sum()}\\n\")  # Total de nulos en el DataFrame\n","\n","\n","#Columnas  rellenar\n","df_game.loc[:, 'ft_pct_home'] = df_game['ft_pct_home'].fillna(0)\n","\n","#ELIMINE ESTE FOR\n","\n"," #    columnas_a_llenar = {\n"," #       df_game: 'ft_pct_home'\n"," #\n"," #   Iterar sobre cada DataFrame y sus columnas\n"," #    for df, columnas in columnas_a_llenar.items():\n"," #       df[columnas] = df[columnas].fillna(0)\n","\n","\n","\n","#completar de forma especifica los nulos team_details\n","nuevos_registros = [\n","    {\n","        'team_id': '1610612738',\n","        'abbreviation': 'BOS',\n","        'nickname': 'Celtics',\n","        'yearfounded': '1946',\n","        'city': 'Boston',\n","        'arena': 'TD Garden',\n","        'arenacapacity': '18624',\n","        'owner': 'Wyc Grousbeck',\n","        'generalmanager': 'Brad Stevens',\n","        'headcoach': 'Joe Mazzulla',\n","        'dleagueaffiliation': 'Maine Celtics',\n","        'facebook': 'https://web.facebook.com/bostonceltics/',\n","        'instagram': 'https://www.instagram.com/celtics/',\n","        'twitter': 'https://x.com/celtics'\n","    },\n","    {\n","        'team_id': '1610612739',\n","        'abbreviation': 'CLE',\n","        'nickname': 'Cavaliers',\n","        'yearfounded': '1970',\n","        'city': 'cleveland',\n","        'arena': 'Rocket Arena',\n","        'arenacapacity': '19432',\n","        'owner': 'Dan Gilbert',\n","        'generalmanager': 'Mike Gansey',\n","        'headcoach': 'Kenny Atkinson',\n","        'dleagueaffiliation': 'The Cleveland Charge',\n","        'facebook': 'https://web.facebook.com/Cavs/',\n","        'instagram': 'https://www.instagram.com/cavs/',\n","        'twitter': 'https://x.com/cavs'\n","    },\n","    {\n","        'team_id': '1610612740',\n","        'abbreviation': 'NOP',\n","        'nickname': 'Pelicans',\n","        'yearfounded': '2002',\n","        'city': 'New Orleans',\n","        'arena': 'New Orleans Arena',\n","        'arenacapacity': '17791',\n","        'owner': 'Gayle Benson',\n","        'generalmanager': 'Bryson Graham',\n","        'headcoach': 'Willie Green',\n","        'dleagueaffiliation': 'Birmingham Squadron',\n","        'facebook': 'https://web.facebook.com/PelicansNBA/',\n","        'instagram': 'https://www.instagram.com/pelicansnba/',\n","        'twitter': 'https://x.com/PelicansNBA'\n","    },\n","    {\n","        'team_id': '1610612752',\n","        'abbreviation': 'NYK',\n","        'nickname': 'Knicks',\n","        'yearfounded': '1946',\n","        'city': 'New York',\n","        'arena': 'Madison Square Garden',\n","        'arenacapacity': '19500',\n","        'owner': 'James L. Dolan',\n","        'generalmanager': 'Gersson Rosas',\n","        'headcoach': 'Tom Thibodeau',\n","        'dleagueaffiliation': 'Westchester Knicks',\n","        'facebook': 'https://web.facebook.com/NYKnicks',\n","        'instagram': 'https://www.instagram.com/nyknicks',\n","        'twitter': 'https://x.com/nyknicks'\n","    },\n","    {\n","        'team_id': '1610612753',\n","        'abbreviation': 'ORL',\n","        'nickname': 'Magic',\n","        'yearfounded': '1989',\n","        'city': 'Orlando',\n","        'arena': 'Kia Center',\n","        'arenacapacity': '20000',\n","        'owner': 'RDV Sports, Inc.',\n","        'generalmanager': 'Anthony Parker',\n","        'headcoach': 'Jamahl Mosley',\n","        'dleagueaffiliation': 'Osceola Magic y Lakeland Magic',\n","        'facebook': 'https://web.facebook.com/OrlandoMagic/',\n","        'instagram': 'https://www.instagram.com/orlandomagic/',\n","        'twitter': 'https://x.com/OrlandoMagic'\n","    }\n","]\n","df_team_details = pd.concat([df_team_details, pd.DataFrame(nuevos_registros)], ignore_index=True)\n","\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Nuggets\", \"arenacapacity\"] = 21000\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Warriors\", \"arenacapacity\"] = 18064\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Nets\", \"arenacapacity\"] = 19000\n","df_team_details.loc[df_team_details[\"nickname\"] == \"76ers\", \"arenacapacity\"] = 21000\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Suns\", \"arenacapacity\"] = 18422\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Thunder\", \"arenacapacity\"] = 18203\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Raptors\", \"arenacapacity\"] = 19800\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Jazz\", \"arenacapacity\"] = 20000\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Pistons\", \"arenacapacity\"] = 20491\n","df_team_details.loc[df_team_details[\"nickname\"] == \"Raptors\", \"headcoach\"] = 'Darko Rajaković'\n","\n","#df_team_details= df_team_details.sort_values(by='team_id').reset_index()\n","\n","#crear una nueva columna en team_details\n","equipos_este = [\"BOS\", \"BKN\", \"NYK\", \"PHI\", \"TOR\", \"ATL\", \"CHA\", \"MIA\", \"ORL\", \"WAS\", \"CHI\", \"CLE\", \"DET\", \"IND\", \"MIL\"]\n","\n","df_team_details[\"Conferencia\"] = df_team_details[\"abbreviation\"].apply(lambda x: \"East\" if x in equipos_este else \"West\")\n","\n","df_team_details['full_name'] = df_team_details['city'] + ' ' + df_team_details['nickname']\n","\n","\n","# filtrar los datos de 'All Stars' y 'pretemporada' game\n","\n","df_game = df_game[~df_game['season_type'].isin(['All-Star', 'All Star', 'Pre Season'])]\n","\n","# filtro de publico por maximo game_info\n","df_game_info = df_game_info[df_game_info['attendance'] <= 21711]\n","\n","\n","#limpios\n","df_game.to_csv('/df_game.csv', index=False)\n","df_team_details.to_csv('/df_team_details.csv', index=False)\n","df_other_stats.to_csv('/df_other_stats.csv', index=False)\n","df_line.to_csv('/df_line.csv', index=False)\n","df_common_player.to_csv('/df_common_player.csv', index=False)\n","df_draft_history.to_csv('/df_draft_history.csv', index=False)\n","df_game_info.to_csv('/df_game_info.csv', index=False)\n","\n","#Carga\n","\n","# Parámetros de conexión\n","import pandas as pd\n","import pymssql\n","from sqlalchemy import create_engine\n","\n","# Configurar conexión a SQL Server\n","server = 'server-sql-grupo1.database.windows.net'\n","database = 'NBA'\n","username = 'Admon'\n","password = 'Password.Server1'\n","\n","# Crear el engine usando pymssql\n","connection_string = f\"mssql+pymssql://{username}:{password}@{server}/{database}\"\n","engine = create_engine(connection_string)\n","\n","# Diccionario de DataFrames (asegúrate de definirlos previamente)\n","dfs_to_load = {\n","    'df_game': df_game,\n","    'df_team_details': df_team_details,\n","    'df_other_stats': df_other_stats,\n","    'df_line': df_line,\n","    'df_common_player': df_common_player,\n","    'df_draft_history': df_draft_history,\n","    'df_game_info': df_game_info\n","}\n","\n","# Cargar los DataFrames en la base de datos\n","for table_name, df in dfs_to_load.items():\n","    df.to_sql(table_name, con=engine, if_exists='replace', index=False)\n","    print(f\"Tabla '{table_name}' cargada correctamente.\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"id":"oTKVbxuQp5_B","executionInfo":{"status":"error","timestamp":1741877856859,"user_tz":180,"elapsed":23404,"user":{"displayName":"Francisco Diaz Molina","userId":"09290855720730868827"}},"outputId":"9e73c7cf-8112-40e3-97e5-a39efd958b97"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Tabla 'df_game' cargada correctamente.\n","Tabla 'df_team_details' cargada correctamente.\n"]},{"output_type":"error","ename":"PendingRollbackError","evalue":"Can't reconnect until invalid transaction is rolled back.  Please rollback() fully before proceeding (Background on this error at: https://sqlalche.me/e/20/8s2b)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mPendingRollbackError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-14-d8f4a818e89c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    254\u001b[0m \u001b[0;31m# Cargar los DataFrames en la base de datos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    255\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtable_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdfs_to_load\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 256\u001b[0;31m     \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_sql\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtable_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mif_exists\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'replace'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    257\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Tabla '{table_name}' cargada correctamente.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    331\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfind_stack_level\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    332\u001b[0m                 )\n\u001b[0;32m--> 333\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    334\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    335\u001b[0m         \u001b[0;31m# error: \"Callable[[VarArg(Any), KwArg(Any)], Any]\" has no\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mto_sql\u001b[0;34m(self, name, con, schema, if_exists, index, index_label, chunksize, dtype, method)\u001b[0m\n\u001b[1;32m   3085\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mio\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0msql\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3086\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3087\u001b[0;31m         return sql.to_sql(\n\u001b[0m\u001b[1;32m   3088\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3089\u001b[0m             \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36mto_sql\u001b[0;34m(frame, name, con, schema, if_exists, index, index_label, chunksize, dtype, method, engine, **engine_kwargs)\u001b[0m\n\u001b[1;32m    839\u001b[0m         )\n\u001b[1;32m    840\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 841\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mpandasSQL_builder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcon\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mschema\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mschema\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mneed_transaction\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpandas_sql\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    842\u001b[0m         return pandas_sql.to_sql(\n\u001b[1;32m    843\u001b[0m             \u001b[0mframe\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/sql.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1643\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__exit__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1644\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreturns_generator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1645\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexit_stack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1646\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1647\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mcontextmanager\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/contextlib.py\u001b[0m in \u001b[0;36mclose\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    607\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    608\u001b[0m         \u001b[0;34m\"\"\"Immediately unwind the context stack.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 609\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__exit__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    610\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    611\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/contextlib.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, *exc_details)\u001b[0m\n\u001b[1;32m    599\u001b[0m                 \u001b[0;31m# set-up context\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    600\u001b[0m                 \u001b[0mfixed_ctx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexc_details\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__context__\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 601\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mexc_details\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    602\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mBaseException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    603\u001b[0m                 \u001b[0mexc_details\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__context__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfixed_ctx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/contextlib.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, *exc_details)\u001b[0m\n\u001b[1;32m    584\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0mis_sync\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m                 \u001b[0;32mif\u001b[0m \u001b[0mcb\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mexc_details\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m                     \u001b[0msuppressed_exc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m                     \u001b[0mpending_raise\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/util.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, type_, value, traceback)\u001b[0m\n\u001b[1;32m    145\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    146\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 147\u001b[0;31m                 \u001b[0;32mwith\u001b[0m \u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msafe_reraise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    148\u001b[0m                     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_rollback_can_be_called\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m                         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrollback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/util/langhelpers.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, type_, value, traceback)\u001b[0m\n\u001b[1;32m    144\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0mexc_value\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exc_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m  \u001b[0;31m# remove potential circular references\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 146\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mexc_value\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexc_tb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    147\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_exc_info\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m  \u001b[0;31m# remove potential circular references\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/util.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, type_, value, traceback)\u001b[0m\n\u001b[1;32m    143\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mtype_\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_transaction_is_active\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 145\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcommit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    146\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    147\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msafe_reraise\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36mcommit\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2627\u001b[0m         \"\"\"\n\u001b[1;32m   2628\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2629\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_commit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2630\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2631\u001b[0m             \u001b[0;32massert\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_active\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_do_commit\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2732\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2733\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2734\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_connection_commit_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2735\u001b[0m             \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2736\u001b[0m                 \u001b[0;31m# whether or not commit succeeds, cancel any\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_connection_commit_impl\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2703\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2704\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_connection_commit_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2705\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_commit_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2706\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2707\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_close_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtry_deactivate\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_commit_impl\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1142\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdialect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_commit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnection\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1143\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mBaseException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1144\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle_dbapi_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1145\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1146\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_savepoint_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mOptional\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_handle_dbapi_exception\u001b[0;34m(self, e, statement, parameters, cursor, context, is_sub_exec)\u001b[0m\n\u001b[1;32m   2353\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2354\u001b[0m                 \u001b[0;32massert\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2355\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexc_info\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2356\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2357\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reentrant_error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_commit_impl\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1140\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_log_info\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"COMMIT\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1141\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1142\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdialect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdo_commit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconnection\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1143\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mBaseException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1144\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle_dbapi_exception\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36mconnection\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    582\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dbapi_connection\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 584\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_revalidate_connection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    585\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mexc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPendingRollbackError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mResourceClosedError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    586\u001b[0m                 \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_revalidate_connection\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    674\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__can_reconnect\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minvalidated\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    675\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_transaction\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 676\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_invalid_transaction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    677\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dbapi_connection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mraw_connection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dbapi_connection\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sqlalchemy/engine/base.py\u001b[0m in \u001b[0;36m_invalid_transaction\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    664\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    665\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_invalid_transaction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mNoReturn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 666\u001b[0;31m         raise exc.PendingRollbackError(\n\u001b[0m\u001b[1;32m    667\u001b[0m             \u001b[0;34m\"Can't reconnect until invalid %stransaction is rolled \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    668\u001b[0m             \u001b[0;34m\"back.  Please rollback() fully before proceeding\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mPendingRollbackError\u001b[0m: Can't reconnect until invalid transaction is rolled back.  Please rollback() fully before proceeding (Background on this error at: https://sqlalche.me/e/20/8s2b)"]}]}]}